WITH NumberedClients AS (
    SELECT 
        ClientID,
        ROW_NUMBER() OVER (ORDER BY ClientID) AS RowNum
    FROM #FilteredClients
)
DECLARE @BatchSize INT = 500; -- Set batch size
DECLARE @StartRow INT = 1;

WHILE EXISTS (SELECT 1 FROM NumberedClients WHERE RowNum BETWEEN @StartRow AND @StartRow + @BatchSize - 1)
BEGIN
    -- Process the batch
    INSERT INTO #ClientAvailability
    SELECT 
        rs.RandomSectionID,
        MAX(CASE 
            WHEN rc.ClientID = nc.ClientID AND rc.AccessFlag = 1 THEN 1
            ELSE 0
        END) AS ClientAvail
    FROM #RandomSections rs
    JOIN NumberedClients nc
        ON nc.ClientID = rs.RandomSectionID
        AND nc.RowNum BETWEEN @StartRow AND @StartRow + @BatchSize - 1
    LEFT JOIN myescreenrandomclientsettings rc
        ON rc.ClientID = nc.ClientID AND rc.RandomSectionID = rs.RandomSectionID
    GROUP BY rs.RandomSectionID;

    -- Move to the next batch
    SET @StartRow = @StartRow + @BatchSize;
END;


    @ClientID INT,
    @DynamicClientID INT,
    @UserID INT
AS
BEGIN
    SET NOCOUNT ON;

    -- Step 1: Retrieve Random Sections
    SELECT RandomSectionID, MenuText, MenuActionV2, Description
    INTO #RandomSections
    FROM randomsection (NOLOCK)
    WHERE RandomSectionID BETWEEN 1 AND 10;

    -- Step 2: Retrieve ClientIDs associated with @DynamicClientID
    SELECT DISTINCT ClientID, 
        CASE 
            WHEN ca.ClientSubAccount <> 0 THEN 0 -- Sub-client
            WHEN EXISTS (SELECT 1 FROM nationalaccountextras na WHERE na.GroupID = ca.ClientID) THEN 2 -- Group
            ELSE 1 -- Master
        END AS ClientTypeID,
        COALESCE(
            (SELECT TOP 1 ClientID 
             FROM clientaccounts 
             WHERE ClientAccount = ca.ClientAccount AND ClientSubAccount = 0), 0) AS MasterID,
        COALESCE(
            (SELECT GroupID 
             FROM nationalaccountextras 
             WHERE ClientID = ca.ClientID), 0) AS GroupID
    INTO #FilteredClients
    FROM clientaccounts ca (NOLOCK)
    WHERE ca.ClientID IN (SELECT EntityID FROM fn_GetClientIDsForDynamicClientID(@DynamicClientID));

    -- Step 3: Initialize Availability Tables
    CREATE TABLE #UserAvailability (RandomSectionID INT, UserAvail INT);
    CREATE TABLE #ClientAvailability (RandomSectionID INT, ClientAvail INT);

    -- Step 4: Determine User Availability (Set-based)
    INSERT INTO #UserAvailability (RandomSectionID, UserAvail)
    SELECT 
        rs.RandomSectionID,
        CASE
            WHEN EXISTS (
                SELECT 1 FROM myescreenrandomusersettings uss (NOLOCK)
                WHERE uss.UserID = @UserID AND uss.RandomSectionID = rs.RandomSectionID AND uss.accessflag = 0
            ) THEN 0 -- Denied
            WHEN EXISTS (
                SELECT 1 FROM myescreenrandomusersettings uss (NOLOCK)
                WHERE uss.UserID = @UserID AND uss.RandomSectionID = rs.RandomSectionID AND uss.accessflag = 1
            ) THEN 1 -- Granted
            ELSE NULL -- No setting
        END AS UserAvail
    FROM #RandomSections rs;

    -- Step 5: Compute Client Availability (Set-based)
    INSERT INTO #ClientAvailability (RandomSectionID, ClientAvail)
    SELECT 
        rs.RandomSectionID,
        MAX(CASE 
            WHEN ca.ClientTypeID = 2 AND rc.AccessFlag = 1 THEN 1 -- Group Level Access
            WHEN ca.ClientTypeID = 1 AND rc.AccessFlag = 1 THEN 1 -- Master Level Access
            WHEN ca.ClientTypeID = 0 AND rc.AccessFlag = 1 THEN 1 -- Client Level Access
            ELSE 0 -- Default Denied
        END) AS ClientAvail
    FROM #RandomSections rs
    CROSS JOIN #FilteredClients ca
    LEFT JOIN myescreenrandomclientsettings rc (NOLOCK)
        ON rc.ClientID IN (ca.ClientID, ca.GroupID, ca.MasterID)
        AND rc.RandomSectionID = rs.RandomSectionID
        AND rc.ClientTypeID = ca.ClientTypeID
    GROUP BY rs.RandomSectionID;

    -- Step 6: Combine Results
    SELECT ca.ClientAvail,
        CASE 
            WHEN ua.UserAvail = 0 THEN 0 -- User Denied
            WHEN ca.ClientAvail = 1 
                 AND ua.UserAvail = 1 THEN 1 -- Both User and Client Granted
            ELSE 0 -- Denied
        END AS UserAvail,
        rs.MenuText,
        rs.MenuActionV2,
        rs.RandomSectionID,
        rs.Description
    FROM #RandomSections rs
    LEFT JOIN #ClientAvailability ca ON ca.RandomSectionID = rs.RandomSectionID
    LEFT JOIN #UserAvailability ua ON ua.RandomSectionID = rs.RandomSectionID;

    -- Cleanup
    DROP TABLE #RandomSections;
    DROP TABLE #FilteredClients;
    DROP TABLE #UserAvailability;
    DROP TABLE #ClientAvailability;

    SET NOCOUNT OFF;
END;
GO
