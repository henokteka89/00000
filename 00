DECLARE @UserID INT = -- Your UserID
DECLARE @DynamicClientID INT = -- Your DynamicClientID

-- Step 1: Retrieve All ClientIDs
DECLARE @ClientIDs TABLE (ClientID INT PRIMARY KEY);

INSERT INTO @ClientIDs (ClientID)
SELECT ClientID FROM fn_DCG_GetClientIDsForDynamicClientID(@DynamicClientID);

-- Step 2: Prepare SectionIDs
DECLARE @SectionIDs TABLE (SectionID INT PRIMARY KEY);

INSERT INTO @SectionIDs (SectionID)
SELECT randomsectionid FROM randomsection WHERE randomsectionid BETWEEN 1 AND 10;

-- Step 3: Gather Client Information
WITH ClientInfo AS
(
    SELECT
        c.ClientID,
        ca.clientaccount,
        ca.clientsubaccount,
        CASE
            WHEN ca.clientsubaccount <> 0 THEN 0  -- Client
            WHEN EXISTS (SELECT 1 FROM nationalaccountextras na WHERE na.groupid = c.ClientID) THEN 2  -- Group
            ELSE 1  -- Master
        END AS ClientTypeID,
        CASE
            WHEN ca.clientsubaccount <> 0 THEN
                (SELECT TOP 1 clientid FROM clientaccounts WHERE clientaccount = ca.clientaccount AND clientsubaccount = 0)
            ELSE NULL
        END AS MasterID,
        (SELECT groupid FROM nationalaccountextras WHERE clientid = c.ClientID) AS GroupID
    FROM @ClientIDs c
    JOIN clientaccounts ca ON ca.clientid = c.ClientID
),
UserSecurity AS
(
    SELECT
        us.randomsectionid AS SectionID,
        us.accessflag AS UserAccessFlag,
        us.SecurityXML AS UserSecurityXML
    FROM myescreenrandomusersectionsettings us
    WHERE us.userid = @UserID AND us.randomsectionid IN (SELECT SectionID FROM @SectionIDs)
),
ClientSecurity AS
(
    SELECT
        css.clientid,
        css.clienttypeid,
        css.randomsectionid AS SectionID,
        css.accessflag AS AccessFlag,
        css.SECURITYXML AS SecurityXML
    FROM myescreenrandomclientsectionsettings css
    WHERE css.randomsectionid IN (SELECT SectionID FROM @SectionIDs)
),
Combined AS
(
    SELECT
        s.SectionID,
        ci.ClientID,
        ci.ClientTypeID,
        ci.MasterID,
        ci.GroupID,
        us.UserAccessFlag,
        us.UserSecurityXML
    FROM @SectionIDs s
    CROSS JOIN ClientInfo ci
    LEFT JOIN UserSecurity us ON us.SectionID = s.SectionID
)
-- Step 5: Determine SecurityXML for Each SectionID
SELECT
    s.SectionID,
    CASE
        -- User Level
        WHEN us.UserAccessFlag IS NOT NULL THEN us.UserSecurityXML

        -- Client Level
        WHEN cs_client.AccessFlag IS NOT NULL THEN
            CASE WHEN us.UserSecurityXML IS NULL THEN cs_client.SecurityXML ELSE us.UserSecurityXML END

        -- Master Level
        WHEN cs_master.AccessFlag IS NOT NULL THEN
            CASE WHEN us.UserSecurityXML IS NULL THEN cs_master.SecurityXML ELSE us.UserSecurityXML END

        -- Group Level
        WHEN cs_group.AccessFlag IS NOT NULL THEN
            CASE WHEN us.UserSecurityXML IS NULL THEN cs_group.SecurityXML ELSE us.UserSecurityXML END

        -- Default
        ELSE us.UserSecurityXML
    END AS SecurityXML
FROM
    @SectionIDs s
    LEFT JOIN UserSecurity us ON us.SectionID = s.SectionID

    -- Client Level
    LEFT JOIN ClientInfo ci ON ci.ClientID IN (SELECT ClientID FROM @ClientIDs)
    LEFT JOIN ClientSecurity cs_client ON cs_client.clientid = ci.ClientID AND cs_client.clienttypeid = ci.ClientTypeID AND cs_client.SectionID = s.SectionID

    -- Master Level
    LEFT JOIN ClientSecurity cs_master ON cs_master.clientid = ci.MasterID AND cs_master.clienttypeid = 1 AND cs_master.SectionID = s.SectionID

    -- Group Level
    LEFT JOIN ClientSecurity cs_group ON cs_group.clientid = ci.GroupID AND cs_group.clienttypeid = 2 AND cs_group.SectionID = s.SectionID

ORDER BY s.SectionID;


-- Final Query
SELECT
    s.SectionID,
    COALESCE(us.SecurityXML, cs_client.SecurityXML, cs_master.SecurityXML, cs_group.SecurityXML) AS SecurityXML
FROM
    @SectionIDs s
    OUTER APPLY
    (
        -- User Level
        SELECT TOP 1
            uss.SecurityXML
        FROM myescreenrandomusersectionsettings uss
        WHERE uss.userid = @UserID AND uss.randomsectionid = s.SectionID
        ORDER BY CASE WHEN uss.accessflag IS NOT NULL THEN 1 ELSE 2 END
    ) us
    OUTER APPLY
    (
        -- Client Level
        SELECT TOP 1
            css.SecurityXML
        FROM ClientInfo ci
        JOIN myescreenrandomclientsectionsettings css ON css.clientid = ci.ClientID AND css.clienttypeid = ci.ClientTypeID AND css.randomsectionid = s.SectionID
        WHERE ci.ClientID IN (SELECT ClientID FROM @ClientIDs)
        AND us.SecurityXML IS NULL  -- Only consider if UserSecurityXML is NULL
        ORDER BY CASE WHEN css.accessflag IS NOT NULL THEN 1 ELSE 2 END
    ) cs_client
    OUTER APPLY
    (
        -- Master Level
        SELECT TOP 1
            css.SecurityXML
        FROM ClientInfo ci
        JOIN myescreenrandomclientsectionsettings css ON css.clientid = ci.MasterID AND css.clienttypeid = 1 AND css.randomsectionid = s.SectionID
        WHERE ci.MasterID IS NOT NULL
        AND us.SecurityXML IS NULL AND cs_client.SecurityXML IS NULL  -- Only if higher priority SecurityXML is NULL
        ORDER BY CASE WHEN css.accessflag IS NOT NULL THEN 1 ELSE 2 END
    ) cs_master
    OUTER APPLY
    (
        -- Group Level
        SELECT TOP 1
            css.SecurityXML
        FROM ClientInfo ci
        JOIN myescreenrandomclientsectionsettings css ON css.clientid = ci.GroupID AND css.clienttypeid = 2 AND css.randomsectionid = s.SectionID
        WHERE ci.GroupID IS NOT NULL
        AND us.SecurityXML IS NULL AND cs_client.SecurityXML IS NULL AND cs_master.SecurityXML IS NULL  -- Only if higher priority SecurityXML is NULL
        ORDER BY CASE WHEN css.accessflag IS NOT NULL THEN 1 ELSE 2 END
    ) cs_group
ORDER BY s.SectionID;
