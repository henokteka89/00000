 
BEGIN
    SET NOCOUNT ON;

    -- Step 1: Retrieve ClientIDs associated with the DynamicClientID
    WITH ClientIDs AS (
        SELECT ClientID
        FROM fn_DCG_GetClientIDsForDynamicClientID(@DynamicClientID)
    ),

    -- Step 2: Random Sections (IDs 1 to 10)
    RandomSections AS (
        SELECT RandomSectionID
        FROM randomsection
        WHERE RandomSectionID BETWEEN 1 AND 10
    ),

    -- Step 3: Client Hierarchy Information
    ClientHierarchy AS (
        SELECT DISTINCT
            ca.ClientID,
            CASE
                WHEN ca.ClientSubAccount <> 0 THEN 0 -- Client
                WHEN EXISTS (
                    SELECT 1 FROM nationalaccountextras na
                    WHERE na.GroupID = ca.ClientID
                ) THEN 2 -- Group
                ELSE 1 -- Master
            END AS ClientTypeID,
            COALESCE(master.ClientID, 0) AS MasterID,
            COALESCE(na.GroupID, 0) AS GroupID
        FROM clientaccounts ca
        LEFT JOIN clientaccounts master
            ON ca.ClientAccount = master.ClientAccount AND master.ClientSubAccount = 0
        LEFT JOIN nationalaccountextras na
            ON ca.ClientID = na.ClientID
        WHERE ca.ClientID IN (SELECT ClientID FROM ClientIDs)
    ),

    -- Step 4: User Security Data
    UserAccess AS (
        SELECT
            uss.UserID,
            uss.RandomSectionID,
            uss.AccessFlag AS UserAccessFlag,
            uss.SecurityXML AS UserSecurityXML
        FROM myescreenrandomusersectionsettings uss
        WHERE uss.UserID = @UserID
    ),

    -- Step 5: Client Access Data
    ClientAccess AS (
        SELECT DISTINCT
            css.ClientID,
            css.ClientTypeID,
            css.RandomSectionID,
            MAX(css.AccessFlag) AS ClientAccessFlag,
            MAX(css.SecurityXML) AS ClientSecurityXML
        FROM myescreenrandomclientsectionsettings css
        GROUP BY css.ClientID, css.ClientTypeID, css.RandomSectionID
    ),

    -- Step 6: Combine Access Data and Hierarchy
    CombinedAccess AS (
        SELECT DISTINCT
            rs.RandomSectionID,
            ch.ClientID,
            ch.ClientTypeID,
            ch.MasterID,
            ch.GroupID,
            ua.UserAccessFlag,
            ua.UserSecurityXML,
            ca.ClientAccessFlag,
            ca.ClientSecurityXML,
            -- Determine Final SecurityXML Logic
            COALESCE(
                ua.UserSecurityXML,
                CASE
                    WHEN ca.ClientAccessFlag = 1 THEN ca.ClientSecurityXML
                    WHEN ca.ClientAccessFlag = 0 THEN NULL
                END
            ) AS FinalSecurityXML
        FROM RandomSections rs
        CROSS JOIN ClientHierarchy ch
        LEFT JOIN ClientAccess ca
            ON rs.RandomSectionID = ca.RandomSectionID
            AND (
                (ca.ClientID = ch.ClientID AND ca.ClientTypeID = ch.ClientTypeID) OR
                (ca.ClientID = ch.MasterID AND ca.ClientTypeID = 1) OR
                (ca.ClientID = ch.GroupID AND ca.ClientTypeID = 2)
            )
        LEFT JOIN UserAccess ua
            ON rs.RandomSectionID = ua.RandomSectionID
    ),

    -- Step 7: Aggregate Final Results
    AggregatedResults AS (
        SELECT
            RandomSectionID,
            MAX(FinalSecurityXML) AS SecurityXML -- Pick the highest priority SecurityXML
        FROM CombinedAccess
        GROUP BY RandomSectionID
    )

    -- Final Output
    SELECT
        rs.RandomSectionID,
        ar.SecurityXML,
        rs.MenuText,
        rs.MenuActionV2,
        rs.Description
    FROM AggregatedResults ar
    JOIN randomsection rs
        ON ar.RandomSectionID = rs.RandomSectionID
    ORDER BY rs.RandomSectionID;

END;
GO
