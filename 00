 
BEGIN
    SET NOCOUNT ON;

    -- Step 1: Retrieve Random Sections (IDs 1 to 10)
    SELECT RandomSectionID, MenuText, MenuActionV2, Description
    INTO #RandomSections
    FROM randomsection WITH (NOLOCK)
    WHERE RandomSectionID BETWEEN 1 AND 10;

    -- Step 2: Retrieve ClientIDs associated with @DynamicClientID
    SELECT ClientID INTO #ClientIDs FROM fn_GetClientIDsForDynamicClientID(@DynamicClientID);

    -- Step 3: Initialize Temporary Table for Relevant ClientIDs
    CREATE TABLE #RelevantClients (
        ClientID INT,
        MasterID INT NULL,
        GroupID INT NULL,
        IsAvailable INT NULL
    );

    -- Step 4: Identify Relevant ClientIDs and Preserve MasterID and GroupID
    INSERT INTO #RelevantClients (ClientID, MasterID, GroupID)
    SELECT 
        c.ClientID,
        ca.ClientAccount AS MasterID,
        na.GroupID
    FROM #ClientIDs c
    LEFT JOIN clientaccounts ca WITH (NOLOCK) ON c.ClientID = ca.ClientID
    LEFT JOIN nationalaccountextras na WITH (NOLOCK) ON c.ClientID = na.ClientID;

    -- Step 5: Identify Available ClientIDs
    UPDATE rc
    SET IsAvailable = 1
    FROM #RelevantClients rc
    WHERE EXISTS (
        SELECT 1
        FROM myescreenrandomclientsettings cs WITH (NOLOCK)
        WHERE cs.ClientID = rc.ClientID
          AND cs.AccessFlag = 1
    );

    -- Step 6: Delete Irrelevant ClientIDs
    DELETE FROM #RelevantClients
    WHERE IsAvailable IS NULL;

    -- Step 7: Calculate Availability for MasterID and GroupID
    UPDATE rc
    SET IsAvailable = 1
    FROM #RelevantClients rc
    WHERE rc.MasterID IS NOT NULL
      AND EXISTS (
          SELECT 1
          FROM myescreenrandomclientsettings cs WITH (NOLOCK)
          WHERE cs.ClientID = rc.MasterID
            AND cs.AccessFlag = 1
      );

    UPDATE rc
    SET IsAvailable = 1
    FROM #RelevantClients rc
    WHERE rc.GroupID IS NOT NULL
      AND EXISTS (
          SELECT 1
          FROM myescreenrandomclientsettings cs WITH (NOLOCK)
          WHERE cs.ClientID = rc.GroupID
            AND cs.AccessFlag = 1
      );

    -- Step 8: Determine Final Availability
    SELECT 
        rs.RandomSectionID,
        MAX(CASE 
            WHEN rc.ClientID IS NOT NULL AND rc.IsAvailable = 1 THEN 1 -- Client-Level Availability
            WHEN rc.MasterID IS NOT NULL AND rc.IsAvailable = 1 THEN 1 -- Master-Level Availability
            WHEN rc.GroupID IS NOT NULL AND rc.IsAvailable = 1 THEN 1 -- Group-Level Availability
            ELSE 0 -- Default Denied
        END) AS ClientAvail,
        rs.MenuText,
        rs.MenuActionV2,
        rs.Description
    FROM #RandomSections rs
    LEFT JOIN #RelevantClients rc ON rc.ClientID = rs.RandomSectionID
    GROUP BY rs.RandomSectionID, rs.MenuText, rs.MenuActionV2, rs.Description;

    -- Cleanup
    DROP TABLE #RandomSections;
    DROP TABLE #ClientIDs;
    DROP TABLE #RelevantClients;

    SET NOCOUNT OFF;
END;
GO










































WITH CombinedClients AS (
    -- Step 1: Add Clients under Authorized Groups and Masters
    SELECT 
        mydcc.dynamicclientid, 
        nae.clientid
    FROM 
        nationalaccountextra nae WITH (NOLOCK)
    JOIN 
        dynamicclientcontents mydcc WITH (NOLOCK)
        ON nae.groupid = mydcc.clientid
    WHERE 
        mydcc.clienttypeid = 2 
        AND mydcc.includeexcludeflag = 'I'

    UNION ALL

    SELECT 
        mydcc.dynamicclientid, 
        ca.clientid
    FROM 
        clientaccounts ca WITH (NOLOCK)
    WHERE 
        ca.clientaccount IN (
            SELECT ca1.clientaccount
            FROM clientaccounts ca1 WITH (NOLOCK)
            WHERE ca1.clientid IN (
                SELECT mydcc.clientid
                FROM dynamicclientcontents mydcc WITH (NOLOCK)
                WHERE mydcc.clienttypeid = 1
                    AND mydcc.includeexcludeflag = 'I'
            )
        )

    UNION ALL

    -- Step 3: Add Specific Clients
    SELECT 
        mydcc.dynamicclientid, 
        mydcc.clientid
    FROM 
        dynamicclientcontents mydcc WITH (NOLOCK)
    WHERE 
        mydcc.clienttypeid = 0
        AND mydcc.includeexcludeflag = 'I'
)

SELECT 
    dynamicclientid, 
    COUNT(DISTINCT clientid) AS TotalClientIDs
FROM 
    CombinedClients
GROUP BY 
    dynamicclientid
HAVING 
    COUNT(DISTINCT clientid) >= 1000 -- Adjust threshold as needed
ORDER BY 
    TotalClientIDs DESC;









-- Step 4: Build Client Hierarchy
WITH ClientHierarchy AS
(
    SELECT 
        ca.ClientID,
        ca.ClientAccount,
        ca.ClientSubAccount,
        CASE 
            WHEN ca.ClientSubAccount <> 0 THEN 0  -- Client Level
            WHEN EXISTS (
                SELECT 1 
                FROM nationalaccountextras na (NOLOCK) 
                WHERE na.groupid = ca.ClientID
            ) THEN 2  -- Group Level
            ELSE 1  -- Master Level
        END AS ClientTypeID,
        ISNULL(na.GroupID, NULL) AS GroupID,
        ISNULL(
            (SELECT TOP 1 ca2.ClientID 
             FROM clientaccounts ca2 (NOLOCK) 
             WHERE ca2.ClientAccount = ca.ClientAccount AND ca2.ClientSubAccount = 0),
            NULL
        ) AS MasterID
    FROM #ClientIDs ci
    JOIN clientaccounts ca (NOLOCK) ON ca.ClientID = ci.ClientID
    LEFT JOIN nationalaccountextras na (NOLOCK) ON na.ClientID = ca.ClientID
)
, ClientAccess AS
(
    -- Client Level Access
    SELECT 
        rs.RandomSectionID,
        ch.ClientID,
        1 AS AccessFlag
    FROM #RandomSections rs
    JOIN ClientHierarchy ch ON ch.ClientTypeID = 0
    JOIN myescreenrandomclientsettings mrc (NOLOCK)
        ON mrc.ClientID = ch.ClientID 
        AND mrc.ClientTypeID = 0 
        AND mrc.RandomSectionID = rs.RandomSectionID

    UNION ALL

    -- Master Level Access
    SELECT 
        rs.RandomSectionID,
        ch.ClientID,
        1 AS AccessFlag
    FROM #RandomSections rs
    JOIN ClientHierarchy ch ON ch.ClientTypeID = 1
    JOIN myescreenrandomclientsettings mrc (NOLOCK)
        ON mrc.ClientID = ch.MasterID 
        AND mrc.ClientTypeID = 0 
        AND mrc.RandomSectionID = rs.RandomSectionID

    UNION ALL

    -- Group Level Access
    SELECT 
        rs.RandomSectionID,
        ch.ClientID,
        1 AS AccessFlag
    FROM #RandomSections rs
    JOIN ClientHierarchy ch ON ch.ClientTypeID = 2
    JOIN myescreenrandomclientsettings mrc (NOLOCK)
        ON mrc.ClientID = ch.GroupID 
        AND mrc.ClientTypeID = 1 
        AND mrc.RandomSectionID = rs.RandomSectionID
)

-- Final Update: Client Availability
UPDATE ca
SET ClientAvail = 1
FROM #ClientAvailability ca
JOIN (
    SELECT DISTINCT RandomSectionID, ClientID
    FROM ClientAccess
) av 
ON ca.RandomSectionID = av.RandomSectionID;












-- Step 4: Build Client Hierarchy
WITH ClientHierarchy AS
(
    SELECT 
        ca.ClientID,
        ca.ClientAccount,
        ca.ClientSubAccount,
        CASE 
            WHEN ca.ClientSubAccount <> 0 THEN 0  -- Client Level
            WHEN EXISTS (
                SELECT 1 
                FROM nationalaccountextras na (NOLOCK) 
                WHERE na.groupid = ca.ClientID
            ) THEN 2  -- Group Level
            ELSE 1  -- Master Level
        END AS ClientTypeID,
        ISNULL(na.GroupID, NULL) AS GroupID,
        ISNULL(
            (SELECT TOP 1 ca2.ClientID 
             FROM clientaccounts ca2 (NOLOCK) 
             WHERE ca2.ClientAccount = ca.ClientAccount AND ca2.ClientSubAccount = 0),
            NULL
        ) AS MasterID
    FROM #ClientIDs ci
    JOIN clientaccounts ca (NOLOCK) ON ca.ClientID = ci.ClientID
    LEFT JOIN nationalaccountextras na (NOLOCK) ON na.ClientID = ca.ClientID
),
ClientAccess AS
(
    SELECT 
        rs.RandomSectionID,
        ch.ClientID,
        MAX(
            CASE 
                WHEN ch.ClientTypeID = 2 THEN mrc.accessflag
                ELSE NULL
            END
        ) AS GroupAccess,
        MAX(
            CASE 
                WHEN ch.ClientTypeID = 1 THEN mrc.accessflag
                ELSE NULL
            END
        ) AS MasterAccess,
        MAX(
            CASE 
                WHEN ch.ClientTypeID = 0 THEN mrc.accessflag
                ELSE NULL
            END
        ) AS ClientAccess
    FROM #RandomSections rs
    CROSS JOIN ClientHierarchy ch
    LEFT JOIN myescreenrandomclientsettings mrc (NOLOCK)
        ON mrc.RandomSectionID = rs.RandomSectionID
        AND (
            mrc.ClientID = ch.ClientID AND mrc.ClientTypeID = 0 OR
            mrc.ClientID = ch.MasterID AND mrc.ClientTypeID = 0 OR
            mrc.ClientID = ch.GroupID AND mrc.ClientTypeID = 1
        )
    GROUP BY rs.RandomSectionID, ch.ClientID
)
UPDATE ca
SET ClientAvail = 1
FROM #ClientAvailability ca
JOIN ClientAccess av 
    ON ca.RandomSectionID = av.RandomSectionID
WHERE COALESCE(av.ClientAccess, av.MasterAccess, av.GroupAccess, 0) = 1;
















-- Precompute MasterID and GroupID for all ClientIDs
WITH FilteredClientIDs AS (
    SELECT 
        ca.ClientID, 
        c.ClientAccount, 
        c.ClientSubaccount,
        ne.GroupID,
        MasterID = 
            (SELECT TOP 1 clientid 
             FROM clientaccounts 
             WHERE clientaccount = c.ClientAccount AND clientsubaccount = 0)
    FROM fn_DCG_GetClientIDsForDynamicClientID(@DynamicClientID) ca
    INNER JOIN cla c WITH (NOLOCK) ON ca.ClientID = c.ClientID
    LEFT JOIN nae ne WITH (NOLOCK) ON ca.ClientID = ne.ClientID
),
CombinedClientIDs AS (
    -- Combine all relevant ClientIDs: Direct, Master, and Group
    SELECT ClientID FROM FilteredClientIDs
    UNION ALL
    SELECT MasterID FROM FilteredClientIDs WHERE MasterID IS NOT NULL
    UNION ALL
    SELECT GroupID FROM FilteredClientIDs WHERE GroupID IS NOT NULL
)
-- Filter by existence 
SELECT DISTINCT f.ClientID
FROM FilteredClientIDs f
INNER JOIN CombinedClientIDs cc ON cc.ClientID = f.ClientID
INNER JOIN SectionSettings ms 
    ON ms.ClientID = cc.ClientID
WHERE ISNULL(ms.AccessFlag, 0) = 1; -- Exclude ClientIDs with AccessFlag = 0 or NULL

















DECLARE @UserID INT = 1340;  -- Your UserID
DECLARE @DynamicClientID INT = -- Your DynamicClientID

-- Step 1: Retrieve All ClientIDs
DECLARE @ClientIDs TABLE (ClientID INT PRIMARY KEY);
INSERT INTO @ClientIDs (ClientID)
SELECT ClientID FROM fn_DCG_GetClientIDsForDynamicClientID(@DynamicClientID);

-- Step 2: Prepare SectionIDs
DECLARE @SectionIDs TABLE (SectionID INT PRIMARY KEY);
INSERT INTO @SectionIDs (SectionID)
SELECT randomsectionid FROM randomsection WHERE randomsectionid BETWEEN 1 AND 10;

-- Step 3: Retrieve User Settings
WITH UserSettings AS (
    SELECT
        randomsectionid AS SectionID,
        accessflag AS UserAccessFlag,
        SecurityXML AS UserSecurityXML
    FROM myescreenrandomusersectionsettings
    WHERE userid = @UserID
),
ClientInfo AS (
    SELECT
        c.ClientID,
        ca.clientaccount,
        ca.clientsubaccount,
        CASE
            WHEN ca.clientsubaccount <> 0 THEN 0  -- Client
            WHEN EXISTS (SELECT 1 FROM nationalaccountextras na WHERE na.groupid = c.ClientID) THEN 2  -- Group
            ELSE 1  -- Master
        END AS ClientTypeID,
        CASE
            WHEN ca.clientsubaccount <> 0 THEN
                (SELECT TOP 1 clientid FROM clientaccounts WHERE clientaccount = ca.clientaccount AND clientsubaccount = 0)
            ELSE NULL
        END AS MasterID,
        (SELECT groupid FROM nationalaccountextras WHERE clientid = c.ClientID) AS GroupID
    FROM @ClientIDs c
    JOIN clientaccounts ca ON ca.clientid = c.ClientID
),
ClientSettings AS (
    SELECT
        css.clientid,
        css.clienttypeid,
        css.randomsectionid AS SectionID,
        css.accessflag AS AccessFlag,
        css.SecurityXML AS SecurityXML
    FROM myescreenrandomclientsectionsettings css
    WHERE css.randomsectionid IN (SELECT SectionID FROM @SectionIDs)
),
Combined AS (
    SELECT DISTINCT
        s.SectionID,
        us.UserAccessFlag,
        us.UserSecurityXML,
        ci.ClientID,
        ci.ClientTypeID,
        ci.MasterID,
        ci.GroupID
    FROM @SectionIDs s
    LEFT JOIN UserSettings us ON us.SectionID = s.SectionID
    CROSS JOIN ClientInfo ci
)
-- Step 4: Determine SecurityXML with Correct Logic
SELECT
    s.SectionID,
    -- Determine SecurityXML based on the logic
    CASE
        WHEN us.UserAccessFlag IS NOT NULL THEN us.UserSecurityXML
        WHEN us.UserSecurityXML IS NOT NULL THEN us.UserSecurityXML
        ELSE
            -- Proceed to client settings only if UserAccessFlag is NULL
            (
                SELECT TOP 1 css.SecurityXML
                FROM ClientSettings css
                WHERE css.clientid = ci.ClientID AND css.clienttypeid = ci.ClientTypeID AND css.SectionID = s.SectionID
                    AND css.SecurityXML IS NOT NULL
            )
    END AS SecurityXML
FROM
    @SectionIDs s
    LEFT JOIN UserSettings us ON us.SectionID = s.SectionID
    CROSS JOIN ClientInfo ci
ORDER BY s.SectionID;

























DECLARE @UserID INT = 1340;  -- Your UserID
DECLARE @DynamicClientID INT = -- Your DynamicClientID

-- Step 1: Retrieve All ClientIDs
DECLARE @ClientIDs TABLE (ClientID INT PRIMARY KEY);

INSERT INTO @ClientIDs (ClientID)
SELECT ClientID FROM fn_DCG_GetClientIDsForDynamicClientID(@DynamicClientID);

-- Step 2: Prepare SectionIDs
DECLARE @SectionIDs TABLE (SectionID INT PRIMARY KEY);

INSERT INTO @SectionIDs (SectionID)
SELECT randomsectionid FROM randomsection WHERE randomsectionid BETWEEN 1 AND 10;

-- Step 3: Gather Client Information
WITH ClientInfo AS
(
    SELECT
        c.ClientID,
        ca.clientaccount,
        ca.clientsubaccount,
        CASE
            WHEN ca.clientsubaccount <> 0 THEN 0  -- Client
            WHEN EXISTS (SELECT 1 FROM nationalaccountextras na WHERE na.groupid = c.ClientID) THEN 2  -- Group
            ELSE 1  -- Master
        END AS ClientTypeID,
        CASE
            WHEN ca.clientsubaccount <> 0 THEN
                (SELECT TOP 1 clientid FROM clientaccounts WHERE clientaccount = ca.clientaccount AND clientsubaccount = 0)
            ELSE NULL
        END AS MasterID,
        (SELECT groupid FROM nationalaccountextras WHERE clientid = c.ClientID) AS GroupID
    FROM @ClientIDs c
    JOIN clientaccounts ca ON ca.clientid = c.ClientID
),
Combined AS
(
    SELECT DISTINCT
        s.SectionID,
        ci.ClientID,
        ci.ClientTypeID,
        ci.MasterID,
        ci.GroupID
    FROM @SectionIDs s
    CROSS JOIN ClientInfo ci
),
UserSettings AS
(
    SELECT
        us.randomsectionid AS SectionID,
        us.accessflag AS UserAccessFlag,
        us.SecurityXML AS UserSecurityXML
    FROM myescreenrandomusersectionsettings us
    WHERE us.userid = @UserID AND us.randomsectionid IN (SELECT SectionID FROM @SectionIDs)
),
ClientSettings AS
(
    SELECT
        css.clientid,
        css.clienttypeid,
        css.randomsectionid AS SectionID,
        css.accessflag AS AccessFlag,
        css.SECURITYXML AS SecurityXML
    FROM myescreenrandomclientsectionsettings css
    WHERE css.randomsectionid IN (SELECT SectionID FROM @SectionIDs)
),
-- Step 4: Determine SecurityXML with Proper Priority
SecurityXMLPriority AS
(
    SELECT
        c.SectionID,
        -- Assign priority levels
        ROW_NUMBER() OVER (PARTITION BY c.SectionID ORDER BY
            CASE
                WHEN us.UserSecurityXML IS NOT NULL THEN 1
                WHEN cs_client.SecurityXML IS NOT NULL THEN 2
                WHEN cs_master.SecurityXML IS NOT NULL THEN 3
                WHEN cs_group.SecurityXML IS NOT NULL THEN 4
                ELSE 5
            END
        ) AS Priority,
        -- Coalesce SecurityXML based on priority
        COALESCE(us.UserSecurityXML, cs_client.SecurityXML, cs_master.SecurityXML, cs_group.SecurityXML) AS SecurityXML
    FROM Combined c
    LEFT JOIN UserSettings us ON us.SectionID = c.SectionID
    -- Client Level
    LEFT JOIN ClientSettings cs_client ON cs_client.clientid = c.ClientID AND cs_client.clienttypeid = c.ClientTypeID AND cs_client.SectionID = c.SectionID
    -- Master Level
    LEFT JOIN ClientSettings cs_master ON cs_master.clientid = c.MasterID AND cs_master.clienttypeid = 1 AND cs_master.SectionID = c.SectionID
    -- Group Level
    LEFT JOIN ClientSettings cs_group ON cs_group.clientid = c.GroupID AND cs_group.clienttypeid = 2 AND cs_group.SectionID = c.SectionID
    WHERE
        -- Only consider rows where SecurityXML is available
        us.UserSecurityXML IS NOT NULL
        OR cs_client.SecurityXML IS NOT NULL
        OR cs_master.SecurityXML IS NOT NULL
        OR cs_group.SecurityXML IS NOT NULL
)
-- Step 5: Select the Highest Priority SecurityXML for Each SectionID
SELECT
    s.SectionID,
    sx.SecurityXML
FROM @SectionIDs s
OUTER APPLY
(
    SELECT TOP 1
        p.SecurityXML
    FROM SecurityXMLPriority p
    WHERE p.SectionID = s.SectionID
    ORDER BY p.Priority
) sx
ORDER BY s.SectionID;
