 
BEGIN
    SET NOCOUNT ON;

    -- Step 1: Retrieve Random Sections (IDs 1 to 10)
    SELECT RandomSectionID, MenuText, MenuActionV2, Description
    INTO #RandomSections
    FROM randomsection
    WHERE RandomSectionID BETWEEN 1 AND 10;

    -- Step 2: Retrieve ClientIDs associated with @DynamicClientID
    SELECT ClientID
    INTO #ClientIDs
    FROM fn_DCG_GetClientIDsForDynamicClientID(@DynamicClientID);

    -- Step 3: Initialize Availability Tables
    CREATE TABLE #UserAvailability (
        RandomSectionID INT PRIMARY KEY,
        UserAvail INT,
        SecurityXML VARCHAR(1000)
    );

    CREATE TABLE #ClientAvailability (
        RandomSectionID INT PRIMARY KEY,
        ClientAvail INT
    );

    -- Step 4: Process User Availability
    INSERT INTO #UserAvailability (RandomSectionID, UserAvail, SecurityXML)
    SELECT
        rs.RandomSectionID,
        CASE
            WHEN EXISTS (
                SELECT 1 FROM myescreenrandomusersectionsettings uss
                WHERE uss.UserID = @UserID AND uss.RandomSectionID = rs.RandomSectionID AND uss.accessflag = 0
            ) THEN 0 -- Denied
            WHEN EXISTS (
                SELECT 1 FROM myescreenrandomusersectionsettings uss
                WHERE uss.UserID = @UserID AND uss.RandomSectionID = rs.RandomSectionID AND uss.accessflag = 1
            ) THEN 1 -- Granted
            ELSE NULL -- No setting
        END AS UserAvail,
        (SELECT TOP 1 uss.SecurityXML
         FROM myescreenrandomusersectionsettings uss
         WHERE uss.UserID = @UserID AND uss.RandomSectionID = rs.RandomSectionID
         ORDER BY uss.accessflag DESC) AS SecurityXML
    FROM #RandomSections rs;

    -- Step 5: Initialize Client Availability
    INSERT INTO #ClientAvailability (RandomSectionID, ClientAvail)
    SELECT RandomSectionID, 0 FROM #RandomSections;

    -- Step 6: Process Client Availability
    DECLARE @CurrentClientID INT;
    DECLARE @SectionID INT;

    DECLARE ClientCursor CURSOR LOCAL FAST_FORWARD FOR
    SELECT ClientID FROM #ClientIDs;

    OPEN ClientCursor;
    FETCH NEXT FROM ClientCursor INTO @CurrentClientID;

    WHILE @@FETCH_STATUS = 0
    BEGIN
        -- Process Each RandomSectionID
        DECLARE SectionCursor CURSOR LOCAL FAST_FORWARD FOR
        SELECT RandomSectionID FROM #RandomSections;

        OPEN SectionCursor;
        FETCH NEXT FROM SectionCursor INTO @SectionID;

        WHILE @@FETCH_STATUS = 0
        BEGIN
            DECLARE @ClientAvail INT = NULL;

            -- Check hierarchy levels
            EXEC web_Intranet_MyeMgmt_ClientRandomSectionAvail 
                @ClientID = @CurrentClientID,
                @SectionID = @SectionID,
                @Avail = @ClientAvail OUTPUT;

            -- Update Client Availability
            IF @ClientAvail = 1
            BEGIN
                UPDATE #ClientAvailability
                SET ClientAvail = 1
                WHERE RandomSectionID = @SectionID;
            END

            FETCH NEXT FROM SectionCursor INTO @SectionID;
        END

        CLOSE SectionCursor;
        DEALLOCATE SectionCursor;

        FETCH NEXT FROM ClientCursor INTO @CurrentClientID;
    END

    CLOSE ClientCursor;
    DEALLOCATE ClientCursor;

    -- Step 7: Merge Availability Results
    SELECT
        rs.RandomSectionID,
        ca.ClientAvail,
        ua.UserAvail,
        ua.SecurityXML,
        rs.MenuText,
        rs.MenuActionV2,
        rs.Description
    FROM #RandomSections rs
    LEFT JOIN #UserAvailability ua ON rs.RandomSectionID = ua.RandomSectionID
    LEFT JOIN #ClientAvailability ca ON rs.RandomSectionID = ca.RandomSectionID
    ORDER BY rs.RandomSectionID;

    -- Cleanup
    DROP TABLE #RandomSections;
    DROP TABLE #ClientIDs;
    DROP TABLE #UserAvailability;
    DROP TABLE #ClientAvailability;
END;
GO
