 
BEGIN
    SET NOCOUNT ON;

    -- Temporary table to store results
    CREATE TABLE #SecurityXMLResults (
        RandomSectionID INT PRIMARY KEY,
        SecurityXML VARCHAR(1000) NULL
    );

    -- Retrieve all ClientIDs associated with the DynamicClientID
    DECLARE @ClientIDs TABLE (ClientID INT PRIMARY KEY);
    INSERT INTO @ClientIDs (ClientID)
    SELECT ClientID FROM fn_DCG_GetClientIDsForDynamicClientID(@DynamicClientID);

    -- Iterate through sections 1-10
    DECLARE @RandomSectionID INT = 1;
    WHILE @RandomSectionID <= 10
    BEGIN
        DECLARE @FinalSecurityXML VARCHAR(1000) = NULL;

        -- For each ClientID, invoke the original stored procedure
        DECLARE @ClientID INT;
        DECLARE CursorClientIDs CURSOR LOCAL FAST_FORWARD FOR
        SELECT ClientID FROM @ClientIDs;

        OPEN CursorClientIDs;
        FETCH NEXT FROM CursorClientIDs INTO @ClientID;

        WHILE @@FETCH_STATUS = 0
        BEGIN
            -- Call the original stored procedure
            DECLARE @Avail INT;
            DECLARE @TempSecurityXML VARCHAR(1000);

            EXEC [dbo].[web_Intranet_MyeMgmt_UserRandomSectionAvail]
                @ClientID = @ClientID,
                @UserID = @UserID,
                @SectionID = @RandomSectionID,
                @Avail = @Avail OUTPUT,
                @SecurityXML = @TempSecurityXML OUTPUT;

            -- If SecurityXML is found, set it as the final result for the section
            IF @TempSecurityXML IS NOT NULL
            BEGIN
                SET @FinalSecurityXML = @TempSecurityXML;
            END

            FETCH NEXT FROM CursorClientIDs INTO @ClientID;
        END

        CLOSE CursorClientIDs;
        DEALLOCATE CursorClientIDs;

        -- Insert the result for the current section
        INSERT INTO #SecurityXMLResults (RandomSectionID, SecurityXML)
        VALUES (@RandomSectionID, @FinalSecurityXML);

        SET @RandomSectionID = @RandomSectionID + 1;
    END

    -- Return results
    SELECT RandomSectionID, SecurityXML
    FROM #SecurityXMLResults
    ORDER BY RandomSectionID;

    -- Cleanup
    DROP TABLE #SecurityXMLResults;
END;
GO
