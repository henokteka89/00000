WITH RandomSections AS (
    -- Step 1: Retrieve Random Sections (IDs 1 to 10)
    SELECT 
        RandomSectionID, 
        MenuText, 
        MenuActionV2, 
        Description
    FROM randomsection
    WHERE RandomSectionID BETWEEN 1 AND 10
),
ClientHierarchy AS (
    -- Step 2: Build the hierarchy for all clients returned by the function
    SELECT 
        ca.ClientID,
        ca.ClientAccount,
        ca.ClientSubAccount,
        COALESCE(nae.GroupID, 0) AS GroupID,
        CASE
            WHEN ca.ClientSubAccount <> 0 THEN 0 -- Subclient
            WHEN EXISTS (SELECT 1 FROM nationalaccountextras WHERE GroupID = ca.ClientID) THEN 2 -- Group
            ELSE 1 -- Master
        END AS ClientTypeID,
        COALESCE(m.ClientID, 0) AS MasterID
    FROM clientaccounts ca
    LEFT JOIN nationalaccountextras nae ON nae.ClientID = ca.ClientID
    LEFT JOIN clientaccounts m ON m.ClientAccount = ca.ClientAccount AND m.ClientSubAccount = 0
    WHERE ca.ClientID IN (
        SELECT ClientID FROM fn_DCG_GetClientIDsForDynamicClientID(@DynamicClientID)
    )
),
UserSettings AS (
    -- Step 3: Retrieve user-level settings and their XML
    SELECT
        rs.RandomSectionID,
        MAX(CASE WHEN us.AccessFlag = 0 THEN 0 WHEN us.AccessFlag = 1 THEN 1 ELSE NULL END) AS UserAccess,
        MAX(us.SecurityXML) AS UserSecurityXML
    FROM RandomSections rs
    LEFT JOIN myescreenrandomusersectionsettings us 
        ON rs.RandomSectionID = us.RandomSectionID AND us.UserID = @UserID
    GROUP BY rs.RandomSectionID
),
ClientSettings AS (
    -- Step 4: Retrieve client-level settings and their XML for each hierarchy level
    SELECT 
        rs.RandomSectionID,
        ch.ClientID,
        MAX(CASE WHEN cs.AccessFlag = 0 THEN 0 WHEN cs.AccessFlag = 1 THEN 1 ELSE NULL END) AS ClientAccess,
        MAX(cs.SecurityXML) AS ClientSecurityXML
    FROM RandomSections rs
    JOIN ClientHierarchy ch ON 1 = 1 -- Cross-join each client and section
    LEFT JOIN myescreenrandomclientsectionsettings cs
        ON rs.RandomSectionID = cs.RandomSectionID
        AND (
            (cs.ClientID = ch.ClientID AND cs.ClientTypeID = ch.ClientTypeID) OR
            (cs.ClientID = ch.MasterID AND cs.ClientTypeID = ch.ClientTypeID) OR
            (cs.ClientID = ch.GroupID AND cs.ClientTypeID = ch.ClientTypeID)
        )
    GROUP BY rs.RandomSectionID, ch.ClientID
),
FinalSecurityXML AS (
    -- Step 5: Determine final SecurityXML by prioritizing User over Client
    SELECT 
        rs.RandomSectionID,
        COALESCE(us.UserSecurityXML, cs.ClientSecurityXML) AS FinalSecurityXML,
        CASE
            WHEN us.UserAccess = 0 THEN 0 -- User Denied
            WHEN cs.ClientAccess = 1 AND us.UserAccess = 1 THEN 1 -- Both Granted
            ELSE 0 -- Default Denied
        END AS FinalAccess
    FROM RandomSections rs
    LEFT JOIN UserSettings us ON rs.RandomSectionID = us.RandomSectionID
    LEFT JOIN (
        SELECT RandomSectionID, MAX(ClientAccess) AS ClientAccess, MAX(ClientSecurityXML) AS ClientSecurityXML
        FROM ClientSettings
        GROUP BY RandomSectionID
    ) cs ON rs.RandomSectionID = cs.RandomSectionID
)
-- Final Output
SELECT 
    rs.RandomSectionID,
    rs.MenuText,
    rs.MenuActionV2,
    rs.Description,
    COALESCE(fsx.FinalSecurityXML, 'NULL') AS FinalSecurityXML,
    fsx.FinalAccess
FROM RandomSections rs
LEFT JOIN FinalSecurityXML fsx ON rs.RandomSectionID = fsx.RandomSectionID
ORDER BY rs.RandomSectionID;
